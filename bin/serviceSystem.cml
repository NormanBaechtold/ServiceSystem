/* Example Context Map written with 'ContextMapper DSL' */
ContextMap SimplyGo {
	type = SYSTEM_LANDSCAPE
	state = TO_BE
	/* Add bounded contexts to this context map: */
	contains Traveler
	contains ServiceProvider
	contains ImmigrationAuthorities
	contains MedicalServiceProvider
	contains SimplyGo
	contains SITA
	contains MarketEnvironment

	/* Define the context relationships: */
	MarketEnvironment -> Traveler {
		implementationTechnology = "Context"
	}

	MarketEnvironment -> ServiceProvider {
		implementationTechnology = "Context"
	}
	
	MarketEnvironment -> ImmigrationAuthorities {
		implementationTechnology = "Context"
	}
	
	MarketEnvironment -> MedicalServiceProvider {
		implementationTechnology = "Context"
	}
	
	MarketEnvironment -> SimplyGo {
		implementationTechnology = "Context"
	}
	
	MarketEnvironment -> SITA {
		implementationTechnology = "Context"
	}
	
	Traveler <-> SimplyGo {
		implementationTechnology = "System of Interaction"
	}

	ServiceProvider <-> SimplyGo {
		implementationTechnology = "System of Interaction"
	}

	ImmigrationAuthorities <-> SimplyGo {
		implementationTechnology = "System of Interaction"
	}

	MedicalServiceProvider <-> SimplyGo {
		implementationTechnology = "System of Interaction"
	}

	SimplyGo -> SITA {
		implementationTechnology = "System of Participation"
	}

	SITA -> ImmigrationAuthorities
}

/* Bounded Context Definitions */
BoundedContext MarketEnvironment implements MarketEnvironmentDomain {
	domainVisionStatement = "Contextual aspects of the service ecosystem influence  social, business and technological aspects to be considered in the service system design"
	Aggregate InfluencialDynamics {
		ValueObject MarketContext {
			aggregateRoot
			String serviceEcoystemEnvironment
			def serviceSystem influenceDesign;
			
			- CulturalContexts culturalDesignAspects
			- TechnologicalTrends technologicalInfluence
			- EconomicalTrends economicAndLegalInfluence
			
		}
		
		Entity CulturalContexts {
			String ageGroupSpecifics
			String ethicalConventions
			String languages
			def MarketContext shapeSpecifics;			
		}
		
		Entity TechnologicalTrends {
			String trends
			String standards
			String norms
			def MarketContext frameSolutionSpace;
		}
		
		Entity EconomicalTrends {
			String covid19
			String legalActions
			String changingConsumerBehavior
			def MarketContext frameSolutionSpace;
		}
	}
}

BoundedContext Traveler implements TravelerDomain {
	domainVisionStatement = "This context represents the design aspects of the travelers' value cocreation journey."
	Aggregate TravelerCustomerJourney {
		
		
		Entity TravelerServiceforServiceExchange {
			aggregateRoot
			String serviceExperience
			def personalResourceIntegration;
			def externalResourceConsumption;
			def valueCocreation;
			- TravelerContext engagementPreferences
			- TravelerValueExpectation expectations
			- TravelerResourceIntegration travelerData
			- TravelerResourceExchange externalData
		}
		
		ValueObject TravelerResourceIntegration {
			String personalData
			String healthData
			String tripData
			def provideTravelerData;
			- TravelerEngagementDesign customerJourney			
		}
		
		Entity TravelerEngagementDesign {
			String mobileApp
			String browser
			String onlineBookingPattern
			def TravelerResourceIntegration integrateResources;
			def TravelerResourceExchange enableResourceExchange;
		}
		
	Entity TravelerResourceExchange {
			String entryRegulations
			String healthCare
			String services
			def integrateExternalResources;
			- TravelerEngagementDesign externalResourceAccess
		}
	}
	Aggregate TravelerContext {
		
		Entity TravelerContext {
			aggregateRoot
			def TravelerValueExpectation invoke;
			def TravelerCustomerJourney provideData;
			def TravelerCustomerJourney informEngagementDesign;
			- TargetSegments segmentSpecifications
			- IndividualCharacteristics individualData
		}
		
		Entity TargetSegments {
			String painsAndGains
			String serviceRequirements
			String demographics
			String typicalBehaviors
			def TravelerContext frame;
		}
		Entity IndividualCharacteristics {
			String personalData
			String healthData
			String tripData
			def TravelerContext provideData;
		}
	}
	Aggregate ValueSpaceTraveler {
		ValueObject SimplyGoValueProposition2 {
			String healthCare
			String travel
			String immigration
			def TravelerValueExpectation proposeSolutions;
			- TravelerValueExpectation inspiration
		}
		ValueObject TravelerValueExpectation {
			aggregateRoot
			String healthServices
			String freeTravel
			String serviceConsume
			def SimplyGoValueProposition2 openSolutionSpace;
			def ServiceProviderEngagementDesign dictate;
			- TravelerContext personalNeeds
			- SimplyGoValueProposition2 valueProposition
		}
	}
	
}

BoundedContext ServiceProvider implements ServiceProviderDomain {
	domainVisionStatement = "This context represents the design aspects of the service providers' value cocreation journey."
	Aggregate ServiceProviderContext {
		Entity ServiceProviderContext {
			aggregateRoot
			String serviceProviderBusinessNeeds
			String serviceProviderData
			def ServiceProviderValueExpectation invoke;
			def ServiceProviderCustomerJourney provideData;
			def ServiceProviderCustomerJourney informEngagementDesign;
			- BusinessNeeds businessNeeds
			- BusinessCharacteristics businessData
		}
		
		Entity BusinessNeeds {
			String businessOperation
			String customerData
			String smartIntegration
			def ServiceProviderContext shapes;
			- BusinessCharacteristics businessData
			- LegalObligations requiredFunctionalities
		}
		
		Entity BusinessCharacteristics 	{
			String branch
			String sizeOfBusiness
			String location
			String visitorData
			def BusinessNeeds impact;
		}
		
		Entity LegalObligations {
			String hygieneMeasures
			String attendanceLimits
			String visitorTracing
			def BusinessNeeds invokes;
		}
	}
	Aggregate ValueSpaceServiceProvider {
		Entity SimplyGoValueProposition1 {
			String legalCompliance
			String businessOperation
			def ServiceProviderValueExpectation proposeSolutions;
			- ServiceProviderValueExpectation inspiration
		}
		
		Entity ServiceProviderValueExpectation {
			aggregateRoot
			String profit
			String businessOperation
			def SimplyGoValueProposition1 openSolutionSpace;
			def ServiceProviderEngagementDesign dictate;		
			- ServiceProviderContext businessNeeds
			- SimplyGoValueProposition1 valueProposition
		}
	}
	Aggregate ServiceProviderCustomerJourney {
		
		Entity ServiceProviderServiceForServiceExchange {
			aggregateRoot
			String serviceExperience
			- ServiceProviderValueExpectation expectations
			- ServiceProviderContext engagementPreferences
			- ServiceProviderResourceIntegration businessData
			- ServiceProviderResourceExchange externalData
		}
		
		ValueObject ServiceProviderResourceIntegration {
			String businessData
			String customerData
			def provide businessData;
			- ServiceProviderEngagementDesign customerJourney
		}
		
		Entity ServiceProviderEngagementDesign {
			
			String mobileApp
			def ServiceProviderResourceIntegration integrateResources;
			def ServiceProviderResourceExchange enableResourceExchange;
		}
		
		Entity ServiceProviderResourceExchange {
			String customerData
			String legalObligations
			def integrateExternalResources;
			- ServiceProviderEngagementDesign externalResourceAccess
		}
	}
}

BoundedContext ImmigrationAuthorities implements ImmigrationAuthoritiesDomain {
	domainVisionStatement = "This context represents the design aspects of the immigration authorities' value cocreation journey."
	Aggregate ImmigrationAuthorityContext {
		
		Entity ImmigrationAuthorityContext {
			aggregateRoot
			def ImmigrationAuthorityValueExpectation invoke;
			def ImmigrationAuthorityCustomerJourney provideData;
			def ImmigrationAuthorityCustomerJourney informEngagementDesign;
			- RegulatoryNeeds regulatoryNeeds
			- ImmigrationauthorityCharacteristics regulatoryData
		}
		
		Entity ImmigrationauthorityCharacteristics 	{
			String entryRegulations
			String entryProcedures
			def ImmigrationAuthorityContext impact;
		}
		Entity RegulatoryNeeds {
			String travelerData
			String distributionOfNewsandInfos
			def ImmigrationAuthorityContext inform;
		}
	}
	
	Aggregate ImmigrationAuhtorityValueSpace {
		Entity SimplyGoValueProposition3 {
			String regulationsDistribution
			String seamlessTravelerDataDistribution
			String seamlessImmigration
			String populationProtection
			String publicOrder
			def ImmigrationAuthorityValueExpectation proposeSolutions;
			- ImmigrationAuthorityValueExpectation inspiration
		}
		
		Entity ImmigrationAuthorityValueExpectation {
			aggregateRoot
			String populationProtection
			String publicOrder
			def SimplyGoValueProposition3 openSolutionSpace;
			def ImmigrationAuthorityEngagementDesign dictate;	
			- SimplyGoValueProposition3 valueProposition
			- ImmigrationAuthorityContext regulatoryNeeds
		}
	}
	
	Aggregate ImmigrationAuthorityCustomerJourney {
		Entity ImmigrationAuthorityServiceForServiceExchange {
			aggregateRoot
			String serviceExperience
			def valueCocreation;
			def resourceIntegration;
			def resourceConsumption;
			- ImmigrationAuthorityContext engagementPreferences
			- ImmigrationAuthorityValueExpectation expectations
			- ImmigrationAuthorityResourceIntegration regulatoryData
			- ImmigrationAuthorityResourceExchange externalData
		}
		
	ValueObject ImmigrationAuthorityResourceIntegration {
			String entryRegulations
			String entryProcedures
			def provideRegulatoryData;
			- ImmigrationAuthorityEngagementDesign customerJourney
			
		}
		
		Entity ImmigrationAuthorityEngagementDesign {
			String existingDataExchangeChannels
			String existingInformationDistributionChannels
			def ImmigrationAuthorityResourceIntegration integrateResources;
			def ImmigrationAuthorityResourceExchange enableResourceExchange;
		}
		

		
		Entity ImmigrationAuthorityResourceExchange {
			String passengerData
			def integrateExternalResources;
			- ImmigrationAuthorityEngagementDesign externalResourceAccess
			
		}
	}
}

BoundedContext MedicalServiceProvider implements MedicalServiceProviderDomain {
	domainVisionStatement = "This context represents the design aspects of the medical service providers' value cocreation journey."
	Aggregate MedicalServiceProviderContext {
		
		Entity MedicalServiceProviderContext {
			aggregateRoot
			def MedicalServiceProviderValueExpectation invoke;
			def MedicalServiceProviderCustomerJourney provideData;
			def MedicalServiceProviderCustomerJourney informEngagementDesign;
			- MedicalServiceProviderChracteristics institutionalData
			- OrganizationalNeeds patientData
		}
		
		Entity MedicalServiceProviderChracteristics {
			String testCenterLocation
			String testResults
			String patienVaccinationStatus
			def MedicalServiceProviderContext inform;
		}
		Entity OrganizationalNeeds {
			String patientPersonalData
			String patientHealthData
			String patientDataDistribution
			def MedicalServiceProviderContext inform;
		}
	}
	Aggregate MedicalServiceProviderValueSpace {
		Entity SimplyGoValueProposition4 {
			String travelerPersonalData
			String travelerHealthData
			def MedicalServiceProviderValueExpectation proposeSolutions;
			- MedicalServiceProviderValueExpectation inspiration
		}
		
		Entity MedicalServiceProviderValueExpectation {
			aggregateRoot
			String globalDataDistribution
			String multilingualAccess
			String operationEfficiency
			def SimplyGoValueProposition4 openSolutionSpace;
			def MedicalServiceProviderEngagementDesign dictate;
			- MedicalServiceProviderContext organizationalNeeds
			- SimplyGoValueProposition4 valueProposition
		}
	}
	Aggregate MedicalServiceProviderCustomerJourney {
		
		Entity MedicalServiceProviderServiceForServiceExchange{
			aggregateRoot
			String valueExperience
			def personalResourceIntegration;
			def externalResourceConsumption;
			def valueCocreation;
			- MedicalServiceProviderContext engagementPreferences
			- MedicalServiceProviderValueExpectation expecations
			- MedicalServiceProviderResourceIntegration healthData
			- MedicalServiceProviderResourceExchange externalData
		}
		
		ValueObject MedicalServiceProviderResourceIntegration {
			String locationData
			String patientPersonalData
			String patientHealthData
			String patientTestResults
			def provideHealthData;
			- MedicalServiceProviderEngagementDesign customerJourney
		}
		
		Entity MedicalServiceProviderEngagementDesign {
			
			String existingTestProcedures
			String existingDataDistributionPatterns
			def MedicalServiceProviderResourceIntegration integrateResources;
			def MedicalServiceProviderResourceExchange enableResourceExchange;
		}
		

		
		Entity MedicalServiceProviderResourceExchange {
			String patientPersonalData
			String regulatoryData
			def integrateExternalResources;
			- MedicalServiceProviderEngagementDesign externalResourceAccess
		}
	}
}

BoundedContext SITA implements SITADomain {
	domainVisionStatement = "This context represents the integration of SITA's external competences into the service system."
	Aggregate ResourceIntegration {
		Entity PassengerData {
			String personalData
			String healthData
		}
		ValueObject DataProvision {
			aggregateRoot
			String sitaAirportNetwork
			def ImmigrationAuthority transmittPassengerData;
			- PassengerData passengerData
		}
	}
}

BoundedContext SimplyGo implements SimplyGoPlatformDomain {
	domainVisionStatement = "This context represents the integration and orchestration of actors and their resources inside the platform for service exchange."
	
	Aggregate SITA {
		Entity SITAPlatform{
			aggregateRoot
			String passengerData
			def ImmigrationAuthorityEngagement forwardData;
			- CommunicationIntermediary passengerData
		}
	}
	
	Aggregate ResourceOrchestration {

		Entity CommunicationIntermediary {
			aggregateRoot
			String actors
			String resources
			def resourceOrchestration;
			def actorOrchestration;
			def e2eEncryption;
			def security;
			- ImmigrationAuthorityServiceExchange regulatoryData
			- ServiceProviderServiceExchange businessData
			- TravelerServiceExchange travelerData
			- MedicalServiceProviderServiceExchange healthData
			
				
		}
	}
	
	Aggregate ImmigrationAuthorityEngagement {
		
		ValueObject ImmigrationAuthorityCustomerJourney {
			String travelerPreferredTouchpoints
			String travelerEngagementPatterns
			def ImmigrationAuthorityServiceExchange provideTouchpoints;
		}
		
		Entity ImmigrationAuthorityServiceExchange {
			aggregateRoot
			String resourceIntegration
			String externalDataAccess
			def CommunicationIntermediary resourceIntegration;
			- ImmigrationAuthorityCustomerJourney interaction
			- CommunicationIntermediary externalData
			- SITAPlatform passengerData
			
		}
	}
	

		
	Aggregate ServiceProviderEngagement {
		
		ValueObject ServiceProviderCustomerJourney {
			String travelerPreferredTouchpoints
			String travelerEngagementPatterns
			def ServieProviderServiceExchange provideTouchpoints;
		}
		
		Entity ServiceProviderServiceExchange {
			aggregateRoot
			String resourceIntegration
			String externalDataAccess
			def CommunicationIntermediary resourceIntegration;
			- ServiceProviderCustomerJourney interaction
			- CommunicationIntermediary externalData
		}
	}	
	Aggregate TravelerEngagement {
		
		ValueObject TravelerCustomerJourney {
			String travelerPreferredTouchpoints
			String travelerEngagementPatterns
			def TravelerServiceExchange provideTouchpoints;
		}
		
		Entity TravelerServiceExchange {
			aggregateRoot
			String resourceIntegration
			String externalDataAccess
			def CommunicationIntermediary resourceIntegration;
			- TravelerCustomerJourney interaction
			- CommunicationIntermediary externalData
		}
	}
	Aggregate MedicalServiceProviderEngagement {
		
		ValueObject MedicalServiceProviderCustomerJourney {
			String travelerPreferredTouchpoints
			String travelerEngagementPatterns
			def MedicalServiceProviderServiceExchange provideTouchpoints;
		}
		
		Entity MedicalServiceProviderServiceExchange {
			aggregateRoot
			String resourceIntegration
			String externalDataAccess
			def CommunicationIntermediary resourceIntegration;
			- MedicalServiceProviderCustomerJourney interaction
			- CommunicationIntermediary externalData
		}
	}
	
	
}
	

/* Domain & Subdomain Definitions */
Domain SimplyGoDomain {
	Subdomain TravelerDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Hosting the traveler in the service ecosystem."
	}

	Subdomain ServiceProviderDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Hosting the service provider in the service ecosystem."
	}

	Subdomain ImmigrationAuthoritiesDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Hosting the immigration authorities in the service ecosystem."
	}

	Subdomain MedicalServiceProviderDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Hosting the medical service provider in the service ecosystem."
	}

	Subdomain SimplyGoPlatformDomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Orchestrate the actors and their resources to stabilize resource integration patterns and value cocreation."
	}

	Subdomain SITADomain {
		type = CORE_DOMAIN
		domainVisionStatement = "Providing an external platform for migrating traveler's data into airport data exchange."
	}

	Subdomain MarketEnvironmentDomain {
		type = SUPPORTING_DOMAIN
		domainVisionStatement = "Introducing the situational context and institutional logics into the service ecosystem."
	}

}
