@startuml

skinparam componentStyle uml2

package "'MedicalServiceProviderContext' Aggregate" <<Rectangle>> {
	class MedicalServiceProviderContext <<(A,#fffab8) Aggregate Root>> {
		MedicalServiceProviderChracteristics institutionalData
		OrganizationalNeeds patientData
		MedicalServiceProviderValueExpectation invoke()
		MedicalServiceProviderCustomerJourney provideData()
		MedicalServiceProviderCustomerJourney informEngagementDesign()
	}
	class MedicalServiceProviderChracteristics <<(E,DarkSeaGreen) Entity>> {
		testCenterLocation
		testResults
		patienVaccinationStatus
		MedicalServiceProviderContext inform()
	}
	class OrganizationalNeeds <<(E,DarkSeaGreen) Entity>> {
		patientPersonalData
		patientHealthData
		patientDataDistribution
		MedicalServiceProviderContext inform()
	}
}
package "'MedicalServiceProviderValueSpace' Aggregate" <<Rectangle>> {
	class SimplyGoValueProposition4 <<(E,DarkSeaGreen) Entity>> {
		travelerPersonalData
		travelerHealthData
		MedicalServiceProviderValueExpectation inspiration
		MedicalServiceProviderValueExpectation proposeSolutions()
	}
	class MedicalServiceProviderValueExpectation <<(A,#fffab8) Aggregate Root>> {
		globalDataDistribution
		multilingualAccess
		operationEfficiency
		MedicalServiceProviderContext organizationalNeeds
		SimplyGoValueProposition4 valueProposition
		SimplyGoValueProposition4 openSolutionSpace()
		MedicalServiceProviderEngagementDesign dictate()
	}
}
package "'MedicalServiceProviderCustomerJourney' Aggregate" <<Rectangle>> {
	class MedicalServiceProviderServiceForServiceExchange <<(A,#fffab8) Aggregate Root>> {
		valueExperience
		MedicalServiceProviderContext engagementPreferences
		MedicalServiceProviderValueExpectation expecations
		MedicalServiceProviderResourceIntegration healthData
		MedicalServiceProviderResourceExchange externalData
		void personalResourceIntegration()
		void externalResourceConsumption()
		void valueCocreation()
	}
	class MedicalServiceProviderResourceIntegration <<(V,DarkSeaGreen) Value Object>> {
		locationData
		patientPersonalData
		patientHealthData
		patientTestResults
		MedicalServiceProviderEngagementDesign customerJourney
		void provideHealthData()
	}
	class MedicalServiceProviderEngagementDesign <<(E,DarkSeaGreen) Entity>> {
		existingTestProcedures
		existingDataDistributionPatterns
		MedicalServiceProviderResourceIntegration integrateResources()
		MedicalServiceProviderResourceExchange enableResourceExchange()
	}
	class MedicalServiceProviderResourceExchange <<(E,DarkSeaGreen) Entity>> {
		patientPersonalData
		regulatoryData
		MedicalServiceProviderEngagementDesign externalResourceAccess
		void integrateExternalResources()
	}
}
MedicalServiceProviderContext --> MedicalServiceProviderChracteristics : institutionalData
MedicalServiceProviderContext --> OrganizationalNeeds : patientData
SimplyGoValueProposition4 --> MedicalServiceProviderValueExpectation : inspiration
MedicalServiceProviderValueExpectation --> MedicalServiceProviderContext : organizationalNeeds
MedicalServiceProviderValueExpectation --> SimplyGoValueProposition4 : valueProposition
MedicalServiceProviderServiceForServiceExchange --> MedicalServiceProviderContext : engagementPreferences
MedicalServiceProviderServiceForServiceExchange --> MedicalServiceProviderValueExpectation : expecations
MedicalServiceProviderServiceForServiceExchange --> MedicalServiceProviderResourceIntegration : healthData
MedicalServiceProviderServiceForServiceExchange --> MedicalServiceProviderResourceExchange : externalData
MedicalServiceProviderResourceIntegration --> MedicalServiceProviderEngagementDesign : customerJourney
MedicalServiceProviderResourceExchange --> MedicalServiceProviderEngagementDesign : externalResourceAccess
legend left
  This bounded context implements the subdomain 'MedicalServiceProviderDomain'.
end legend


@enduml
