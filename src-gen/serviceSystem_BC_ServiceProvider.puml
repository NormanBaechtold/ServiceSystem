@startuml

skinparam componentStyle uml2

package "'ServiceProviderContext' Aggregate" <<Rectangle>> {
	class ServiceProviderContext <<(A,#fffab8) Aggregate Root>> {
		String serviceProviderBusinessNeeds
		String serviceProviderData
		BusinessNeeds businessNeeds
		BusinessCharacteristics businessData
		ServiceProviderValueExpectation invoke()
		ServiceProviderCustomerJourney provideData()
		ServiceProviderCustomerJourney informEngagementDesign()
	}
	class BusinessNeeds <<(E,DarkSeaGreen) Entity>> {
		String businessOperation
		String customerData
		String smartIntegration
		BusinessCharacteristics businessData
		LegalObligations requiredFunctionalities
		ServiceProviderContext shapes()
	}
	class BusinessCharacteristics <<(E,DarkSeaGreen) Entity>> {
		String branch
		String sizeOfBusiness
		String location
		String visitorData
		BusinessNeeds impact()
	}
	class LegalObligations <<(E,DarkSeaGreen) Entity>> {
		String hygieneMeasures
		String attendanceLimits
		String visitorTracing
		BusinessNeeds invokes()
	}
}
package "'ValueSpaceServiceProvider' Aggregate" <<Rectangle>> {
	class SimplyGoValueProposition1 <<(E,DarkSeaGreen) Entity>> {
		String legalCompliance
		String businessOperation
		ServiceProviderValueExpectation inspiration
		ServiceProviderValueExpectation proposeSolutions()
	}
	class ServiceProviderValueExpectation <<(A,#fffab8) Aggregate Root>> {
		String profit
		String businessOperation
		ServiceProviderContext businessNeeds
		SimplyGoValueProposition1 valueProposition
		SimplyGoValueProposition1 openSolutionSpace()
		ServiceProviderEngagementDesign dictate()
	}
}
package "'ServiceProviderCustomerJourney' Aggregate" <<Rectangle>> {
	class ServiceProviderServiceForServiceExchange <<(A,#fffab8) Aggregate Root>> {
		String serviceExperience
		ServiceProviderValueExpectation expectations
		ServiceProviderContext engagementPreferences
		ServiceProviderResourceIntegration businessData
		ServiceProviderResourceExchange externalData
	}
	class ServiceProviderResourceIntegration <<(V,DarkSeaGreen) Value Object>> {
		String businessData
		String customerData
		ServiceProviderEngagementDesign customerJourney
		provide businessData()
	}
	class ServiceProviderEngagementDesign <<(E,DarkSeaGreen) Entity>> {
		String mobileApp
		ServiceProviderResourceIntegration integrateResources()
		ServiceProviderResourceExchange enableResourceExchange()
	}
	class ServiceProviderResourceExchange <<(E,DarkSeaGreen) Entity>> {
		String customerData
		String legalObligations
		ServiceProviderEngagementDesign externalResourceAccess
		void integrateExternalResources()
	}
}
ServiceProviderContext --> BusinessNeeds : businessNeeds
ServiceProviderContext --> BusinessCharacteristics : businessData
BusinessNeeds --> BusinessCharacteristics : businessData
BusinessNeeds --> LegalObligations : requiredFunctionalities
SimplyGoValueProposition1 --> ServiceProviderValueExpectation : inspiration
ServiceProviderValueExpectation --> ServiceProviderContext : businessNeeds
ServiceProviderValueExpectation --> SimplyGoValueProposition1 : valueProposition
ServiceProviderServiceForServiceExchange --> ServiceProviderValueExpectation : expectations
ServiceProviderServiceForServiceExchange --> ServiceProviderContext : engagementPreferences
ServiceProviderServiceForServiceExchange --> ServiceProviderResourceIntegration : businessData
ServiceProviderServiceForServiceExchange --> ServiceProviderResourceExchange : externalData
ServiceProviderResourceIntegration --> ServiceProviderEngagementDesign : customerJourney
ServiceProviderResourceExchange --> ServiceProviderEngagementDesign : externalResourceAccess
legend left
  This bounded context implements the subdomain 'ServiceProviderDomain'.
end legend


@enduml
