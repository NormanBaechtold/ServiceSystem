@startuml

skinparam componentStyle uml2

package "'ServiceProviderContext' Aggregate" <<Rectangle>> {
	class ServiceProviderContext <<(A,#fffab8) Aggregate Root>> {
		ServiceProviderValueExpectation businessNeeds
		ServiceProviderEngagementDesign engagementPreferences
		ServiceProviderValueExpectation invoke()
		ServiceProviderCustomerJourney provideData()
		ServiceProviderCustomerJourney informEngagementDesign()
	}
	class BusinessCharacteristics <<(E,DarkSeaGreen) Entity>> {
		String branch
		String sizeOfBusiness
		String location
		String visitorData
		BusinessNeeds businessCharacteristics
		BusinessNeeds impact()
	}
	class LegalObligations <<(E,DarkSeaGreen) Entity>> {
		String hygieneMeasures
		String attendanceLimits
		String visitorTracing
		BusinessNeeds requiredFunctionalites
		BusinessNeeds invokes()
	}
	class BusinessNeeds <<(E,DarkSeaGreen) Entity>> {
		String businessOperation
		String customerData
		String smartIntegration
		ServiceProviderContext businessNeeds
		ServiceProviderContext shapes()
	}
}
package "'ValueSpaceServiceProvider' Aggregate" <<Rectangle>> {
	class SimplyGoValueProposition1 <<(E,DarkSeaGreen) Entity>> {
		String legalCompliance
		String businessOperation
		ServiceProviderValueExpectation valueProposition
		ServiceProviderValueExpectation proposeSolutions()
	}
	class ServiceProviderValueExpectation <<(A,#fffab8) Aggregate Root>> {
		String profit
		String businessOperation
		ServiceProviderEngagementDesign expectations
		SimplyGoValueProposition1 inspiration
		SimplyGoValueProposition1 openSolutionSpace()
		ServiceProviderEngagementDesign dictate()
	}
}
package "'ServiceProviderCustomerJourney' Aggregate" <<Rectangle>> {
	class ServiceProviderEngagementDesign <<(A,#fffab8) Aggregate Root>> {
		String mobileApp
		ServiceProviderResourceIntegration businessData
		ServiceProviderResourceExchange accessPoints
		ServiceProviderResourceIntegration integrateResources()
		ServiceProviderResourceExchange enableResourceExchange()
	}
	class ServiceProviderResourceIntegration <<(E,DarkSeaGreen) Entity>> {
		String businessData
		String customerData
		ServiceProviderValueCocreation ownContribution
	}
	class ServiceProviderResourceExchange <<(E,DarkSeaGreen) Entity>> {
		String customerData
		String legalObligations
		ServiceProviderValueCocreation externalContribution
	}
	class ServiceProviderValueCocreation <<(V,DarkSeaGreen) Value Object>> {
		String businessOperation
		void valueInUse()
	}
}
ServiceProviderContext --> ServiceProviderValueExpectation : businessNeeds
ServiceProviderContext --> ServiceProviderEngagementDesign : engagementPreferences
BusinessCharacteristics --> BusinessNeeds : businessCharacteristics
LegalObligations --> BusinessNeeds : requiredFunctionalites
BusinessNeeds --> ServiceProviderContext : businessNeeds
SimplyGoValueProposition1 --> ServiceProviderValueExpectation : valueProposition
ServiceProviderValueExpectation --> ServiceProviderEngagementDesign : expectations
ServiceProviderValueExpectation --> SimplyGoValueProposition1 : inspiration
ServiceProviderEngagementDesign --> ServiceProviderResourceIntegration : businessData
ServiceProviderEngagementDesign --> ServiceProviderResourceExchange : accessPoints
ServiceProviderResourceIntegration --> ServiceProviderValueCocreation : ownContribution
ServiceProviderResourceExchange --> ServiceProviderValueCocreation : externalContribution
legend left
  This bounded context implements the subdomain 'ServiceProviderDomain'.
end legend


@enduml
